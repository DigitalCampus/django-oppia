# Generated by Django 3.2.15 on 2023-06-19 07:36
import json
from json import JSONDecodeError

from django.db import migrations, models
import django.db.models.deletion


def populate_existing_quizzes_with_the_related_course(apps, shcema_editor):
    quiz_model = apps.get_model("quiz", "Quiz")
    activity_model = apps.get_model("oppia", "Activity")
    quiz_props_model = apps.get_model("quiz", "QuizProps")
    tracker_model = apps.get_model("oppia", "Tracker")
    course_model = apps.get_model("oppia", "Course")
    correct_quizzes = set()

    print("\nAdding related course to quizzes...")
    total_quizzes = quiz_model.objects.count()

    for index, quiz in enumerate(quiz_model.objects.all(), start=1):
        try:
            quiz_props_digest = quiz_props_model.objects.get(quiz_id=quiz.id, name="digest").value
            activities = activity_model.objects.filter(digest=quiz_props_digest)

            if len(activities) == 1:
                course = activities[0].section.course
            else:
                for activity in activities:
                    try:
                        content = json.loads(activity.content)
                        props = content.get("props")
                        if props:
                            course_version = props.get("courseversion")
                            quiz_props_course_version = quiz_props_model.objects.get(quiz_id=quiz.id, name="courseversion").value
                            if course_version == quiz_props_course_version:
                                course = activity.section.course
                                break
                    except JSONDecodeError:
                        print(f"JSONDecodeError: Unable to decode content for Activity ID: {activity.id}")

            if not course:
                trackers = tracker_model.objects.filter(digest=quiz_props_digest).order_by('-tracker_date')
                for tracker in trackers:
                    courses = course_model.objects.filter(id=tracker.course_id)
                    if len(courses) == 1:
                        course = courses[0]
                        break

            if course:
                quiz.course = course
                quiz.save()
                correct_quizzes.add(quiz.id)
                print(f"- ({index}/{total_quizzes}) Assigning Course [{course.id}] to Quiz [{quiz.id}]")
            else:
                print(f"- ({index}/{total_quizzes}) Unable to assign course to Quiz [{quiz.id}]")
        except Exception:
            print(f"- ({index}/{total_quizzes}) No QuizProps for Quiz ID: {quiz.id}")
        except quiz_props_model.MultipleObjectsReturned:
            print(f"- ({index}/{total_quizzes}) Multiple QuizProps Objects returned for Quiz ID: {quiz.id}")


def noop(apps, schema_editor):
    # This migration does not need a reverse function
    pass


class Migration(migrations.Migration):

    dependencies = [
        ('oppia', '0054_cohort_criteria'),
        ('quiz', '0015_populate_time_taken'),
    ]

    operations = [
        migrations.AddField(
            model_name='quiz',
            name='course',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='oppia.course'),
        ),
        migrations.RunPython(populate_existing_quizzes_with_the_related_course, noop),
    ]
